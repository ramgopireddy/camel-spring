<?xml version="1.0" encoding="UTF-8" ?>
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
     <bean class="org.my.dev.MyFileRouteBuilder" id="myFileRouteBuilder" />
     <bean class="org.my.dev.MyFTPRouteBuilder" id="myFTPRouteBuilder" />
     <bean class="org.apache.activemq.spring.ActiveMQConnectionFactory" id="connectionFactory">
          <property name="brokerURL" value="tcp://localhost:61616" />
          <property name="trustAllPackages" value="true" />
     </bean>
     <bean class="org.apache.camel.component.jms.JmsConfiguration" id="jmsConfig">
          <property name="connectionFactory" ref="connectionFactory" />
     </bean>
     <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="activemq">
          <property name="configuration" ref="jmsConfig" />
     </bean>
     <bean class="org.my.dev.Order" id="jaxb2Marshaller">
          <property name="contextPaths">
               <list value-type="java.lang.String">
                    <value>org.my.dev.Order</value>
                    <value>org.my.dev.OrderItem</value>
               </list>
          </property>
     </bean>

     <!--    <camelContext id="_camelContext1" xmlns="http://camel.apache.org/schema/spring" /> -->
     <camelContext xmlns="http://camel.apache.org/schema/spring">
          <!-- here is a sample which processes the input files
         (leaving them in place - see the 'noop' flag)
         then performs content based routing on the message using XPath -->
          <!--   <routeBuilder ref="myFileRouteBuilder" /> -->
          <!--   <routeBuilder ref="myFTPRouteBuilder" />  -->
          <dataFormats>
               <jaxb id="jaxb" contextPath="org.my.dev" />
          </dataFormats>
          <route id="_route1">
               <from id="_from1" uri="file:/Applications/software/projects/fusedemo/jb421/spring-dsl/src/data" />
               <setHeader headerName="orderId" id="_setHeader1">
                    <xpath>/order/orderId/text()</xpath>
               </setHeader>
               <setHeader headerName="vendorName" id="_setHeader2">
                    <xpath>/order/orderItems/orderItem/orderItemPublisherName/text()</xpath>
               </setHeader>
               <choice id="_choice1">
                    <when id="_when1">
                         <simple>${header.vendorName} == 'ABC Company'</simple>
                         <log id="_log1" message="Delivering order ${header.orderId} to vendor ABC." />
                         <marshal ref="jaxb" />

                         <to id="_to1" uri="activemq:queue:abc" />
                    </when>
                    <when id="_when2">
                         <simple>${header.vendorName} == 'ORly'</simple>
                         <log id="_log2" message="Delivering order ${header.orderId} to vendor ORly." />
                         <marshal ref="jaxb" />

                         <to id="_to2" uri="activemq:queue:orly" />

                    </when>
                    <when id="_when3">
                         <simple>${header.vendorName} == 'Namming'</simple>
                         <log id="_log3" message="Delivering order ${header.orderId} to vendor
               Namming." />
                         <marshal ref="jaxb" />

                         <to id="_to3" uri="activemq:queue:namming" />
                    </when>
                    <otherwise id="_otherwise1">
                         <log id="_log4" message="Failed to deliver order: ${header.orderId} to vendor: ${header.vendorName}" />
                    </otherwise>
               </choice>
          </route>

          <route id="_route2">

               <from id="_from" uri="activemq:queue:orly" />
               <unmarshal ref="jaxb" />
               <log id="_log5" message="Consumed from queue ${header.orderId}" />
               <to id="_to5" uri="file:target/consumedOrders?fileName=${header.orderDate}.${header.orderId}.xml" />
          </route>
     </camelContext>

</beans>